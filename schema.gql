# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AuthResult {
  error: String
  token: String
  user: User
}

type BandColor {
  color: String!
  max: Float!
  min: Float!
}

type Course {
  bandColors: [BandColor!]!
  code: String!
  credits: [Credit!]!
  flow: [Course!]!
  historicalDistribution: [DistributionValue!]!

  """Course-Semester-Curriculum-Program ID """
  id: Float!
  mention: String!
  name: String!
  requisites: [Course!]!
}

type Credit {
  label: String!
  value: Int!
}

type Curriculum {
  id: String!
  semesters: [Semester!]!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type DistributionValue {
  label: String!
  value: Int!
}

type Dropout {
  active: Boolean!
  model_accuracy: Float!
  prob_dropout: Float!
}

"""
A field whose value conforms to the standard internet email address format as
specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type LockedUserResult {
  mailResult: JSONObject!
  users: [User!]!
}

type MultipleLockedUserResult {
  mailResults: [JSONObject!]!
  users: [User!]!
}

type Mutation {
  addUsersPrograms(user_programs: [UserProgram!]!): [User!]!
  deleteUser(email: EmailAddress!): [User!]!
  editConfig(name: String!, value: String!): JSONObject!
  lockMailUser(email: EmailAddress!): LockedUserResult!
  login(email: EmailAddress!, password: String!): AuthResult!
  logout: Boolean!
  mailAllLockedUsers: [JSONObject!]!
  program(id: String, student_id: String): Program!
  student(program_id: String, student_id: String): Student
  track(data: String!, datetime_client: DateTime!): Boolean!
  unlock(email: EmailAddress!, password: String!, unlockKey: String!): AuthResult!
  updateUserPrograms(userPrograms: UpdateUserPrograms!): [User!]!
  upsertUsers(users: [UpsertedUser!]!): [User!]!
}

type PerformanceByLoad {
  adviceParagraph: String!
  adviceTitle: String!
  failRateHigh: Int!
  failRateLow: Int!
  failRateMid: Int!
  id: Float!
  loadUnit: PerformanceLoadUnit!
  lowerBoundary: Float!
  upperBoundary: Float!
}

"""Unit used to distinguish load in the foreplan"""
enum PerformanceLoadUnit {
  Credits
}

type Program {
  active: Boolean!
  curriculums: [Curriculum!]!
  desc: String!
  id: String!
  lastGPA: Float!
  name: String!
}

type Query {
  config: JSONObject!
  currentUser: AuthResult
  myPrograms: [Program!]!
  performanceLoadAdvices(program_id: String, student_id: String): [PerformanceByLoad!]!
  programs: [Program!]!
  students(last_n_years: Int = 1, program_id: String!): [Student!]!
  users: [User!]!
}

type Semester {
  courses: [Course!]!
  id: Int!
}

"""Possible states of a taken course"""
enum StateCourse {
  Canceled
  Current
  Failed
  Passed
  Pending
}

type Student {
  curriculums: [String!]!
  dropout: Dropout
  id: ID!
  mention: String!
  name: String!
  programs: [Program!]!
  progress: Float!
  start_year: Int!
  state: String!
  terms: [Term!]!
}

type TakenCourse {
  bandColors: [BandColor!]!
  code: String!
  currentDistribution: [DistributionValue!]!
  equiv: String!
  grade: Float!
  id: Int!
  name: String!
  parallelGroup: Int!
  registration: String!
  state: StateCourse!
}

type Term {
  comments: String!
  cumulated_grade: Float!
  id: Int!
  program_grade: Float!
  semestral_grade: Float!
  situation: String!
  student_id: String!
  takenCourses: [TakenCourse!]!
  term: TermType!
  year: Int!
}

"""Possible states of a term, first semester, second semester or anual"""
enum TermType {
  Anual
  First
  Second
}

type Track {
  app_id: String!
  data: String!
  datetime: DateTime!
  datetime_client: DateTime!
  id: Float!
  user_id: String!
}

input UpdateUserPrograms {
  email: EmailAddress!
  oldPrograms: [String!]!
  programs: [String!]!
}

input UpsertedUser {
  config: JSONObject
  email: EmailAddress!
  locked: Boolean = true
  name: String = "default_name"
  oldEmail: EmailAddress
  student_id: String = ""
  tries: Float = 0
  type: UserType = Student
}

type User {
  admin: Boolean!
  config: JSONObject!
  email: EmailAddress!
  locked: Boolean!
  name: String!
  programs: [Program!]!
  student_id: String!
  tries: Float!
  type: UserType!
  unlockKey: String!
}

input UserProgram {
  email: EmailAddress!
  program: String!
}

"""Possible options of an user type"""
enum UserType {
  Director
  Student
}
