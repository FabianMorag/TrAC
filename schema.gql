# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AuthResult {
  user: User
  error: String
}

type Course {
  code: String!
  name: String!
  credits: Int!
  mention: String!
  semester: Int!
  requisitesRaw: String!
  flow: [Course!]!
  requisites: [Course!]!
  historicalDistribution: [DistributionValue!]!
}

type DistributionValue {
  min: Int!
  max: Int!
  value: Int!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type Mutation {
  login(email: String!, password: String!): AuthResult!
  logout: Boolean!
  unlock(email: String!, password: String!, unlockKey: String!): AuthResult!
  updateUserPrograms(userPrograms: UpdateUserPrograms!): [User!]!
  addUsersPrograms(user_programs: [UserProgram!]!): [User!]!
  upsertUsers(users: [UpsertedUser!]!): [User!]!
  lockMailUser(email: String!): JSONObject!
  mailAllLockedUsers: [JSONObject!]!
}

type Program {
  id: Int!
  name: String!
  desc: String!
  state: String!
  courses: [Course!]!
}

type Query {
  current_user: User
  program(id: Int!): Program
  programs: [Program!]!
  myPrograms: [Program!]!
  student(program_id: Int, student_id: String!): Student
  users: [User!]!
}

"""Possible states of a taken course"""
enum StateCourse {
  Approved
  Reapproved
  Current
  Canceled
  Pending
}

type StateGrade {
  state: StateCourse!
  grade: Float!
}

type Student {
  id: ID!
  program: Program!
  curriculum: Int!
  start_year: Int!
  mention: String!
  terms: [Term!]!
}

type TakenCourse {
  id: ID!
  code: String!
  name: String!
  registration: String!
  grade: Float!
  state: StateCourse!
  historicalStates: [StateGrade!]!
  currentDistribution: [DistributionValue!]!
}

type Term {
  id: ID!
  student_id: String!
  year: Int!
  semester: Int!
  situation: String!
  PSP: Float!
  PGA: Float!
  ProgramPGA: Float!
  takenCourses: [TakenCourse!]!
}

input UpdateUserPrograms {
  email: String!
  oldPrograms: [Int!]!
  programs: [Int!]!
}

input UpsertedUser {
  oldEmail: String
  email: String!
  name: String = "default_name"
  type: UserType = Student
  tries: Float = 0
  rut_id: String = ""
  show_dropout: Boolean = false
  locked: Boolean = true
}

type User {
  email: String!
  name: String!
  admin: Boolean!
  type: UserType!
  rut_id: String
  show_dropout: Boolean!
  programs: [Program!]!
  locked: Boolean!
  tries: Float!
  unlockKey: String!
}

input UserProgram {
  email: String!
  program: Int!
}

"""Possible options of an user type"""
enum UserType {
  Director
  Student
}
